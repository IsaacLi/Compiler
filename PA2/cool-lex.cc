#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[547] =
    {   0,
       73,   73,    9,    9,   19,   19,   73,   73,   75,   68,
       69,   70,   71,   74,   73,   72,   67,   12,   56,   57,
       61,   59,   64,   60,   55,   62,   14,   54,   51,   63,
       58,   66,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   52,   53,   65,   49,
        9,    9,    9,    9,    9,    9,   11,    9,    1,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   67,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   74,    9,   19,   19,   19,   19,   19,   19,   18,
       19,   56,   22,   61,   19,   19,   19,   19,   19,   14,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   60,   58,   73,   23,   24,   13,   14,
       15,   26,   25,   48,   48,   48,   48,   48,   29,   30,
       31,   48,   48,   48,   48,   48,   40,   48,   48,   48,
       48,   50,   50,   50,   50,   50,   50,   29,   30,   31,

       50,   50,   50,   50,   50,   40,   50,   50,   50,   50,
       50,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    7,    8,    4,    5,
        2,    3,    6,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    0,   10,    0,   19,   19,   21,   16,
       20,   17,   14,   15,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   13,   48,   48,   48,   48,   48,   48,
       33,   48,   41,   43,   48,   48,   48,   48,   50,   50,
       50,   50,   50,   50,   50,   33,   50,   41,   43,   50,
       50,   50,   50,   50,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    6,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    0,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   38,   48,   28,
       39,   48,   48,   34,   35,   48,   36,   48,   38,   50,
       28,   39,   50,   50,   50,   34,   35,   46,   36,   44,
       50,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   27,
       48,   48,   48,   37,   27,   45,   50,   50,   37,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   48,
       42,   48,   50,   42,    9,    9,    9,    9,    9,   19,
       19,   19,   19,   19,   48,   48,   50,    9,    9,    9,
       19,   19,   19,   32,   48,   32,    9,    9,    9,   19,
       19,   19,   47,    9,   19,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    2,    3,    4,    5,    5,    5,    5,    6,    7,
        6,    6,    6,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    8,    9,    8,    8,    8,    8,    5,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    8,   24,   25,   26,   27,   28,   29,   30,
       26,   31,   32,   26,   26,   33,   26,   34,   35,   36,
       26,   37,   38,   39,   40,   41,   42,   26,   43,   26,
        8,   44,    8,    8,   45,    8,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   52,   52,   55,   52,   56,
       57,   58,   52,   59,   60,   61,   62,   63,   64,   52,
       52,   52,   65,    8,   66,   67,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    3,    4,
        4,    4,    1,    1,    1,    1,    1,    5,    1,    1,
        1,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    1,    1,    3
    } ;

static yyconst flex_int16_t yy_base[561] =
    {   0,
        0,  558,   68,  546,  136,  535,  196,  197,  556, 2618,
     2618, 2618, 2618, 2618,  536, 2618, 2618, 2618,  528, 2618,
      528, 2618, 2618,  523, 2618, 2618,  504, 2618, 2618,  192,
      479, 2618,    0,  183,  177,  177,  183,  191,  195,  193,
      190,  460,  196,  197,    0,  221,  202,  226,  226,  224,
      234,  236,  198,  437,  242,  230, 2618, 2618, 2618, 2618,
        0,    0,    0,    0,    0,  479, 2618,    0, 2618,  472,
        0,  471,    0,    0,    0,    0,    0,  457,    0,    0,
      253,    0,    0,  301,  368,  294,  301,  369,  371,  407,
      306,  406,  421,  435,  440,  290,  495,  562,  488,  423,

      495,  563,  564,  600,  569,  372,  499,  606,    0,    0,
        0,  227,    0,    0,    0,    0,    0,    0,  468, 2618,
        0,  439, 2618,  438,    0,    0,    0,    0,    0,  429,
        0,    0,  263,    0,    0,  661,  729,  654,  661,  730,
      732,  773,  666,  758,  498,  746,  778,  833,  901,  664,
      826,  836,  838,  902,  903,  905,  928,  939,  940,    0,
        0,    0,    0, 2618, 2618,  437, 2618, 2618,    0,  401,
     2618, 2618, 2618,    0,  232,  264,  270,  304,    0,    0,
      307,  301,  304,  318,  344,  377,    0,  402,  380,  348,
      426,    0,  432,  384,  434,  458,  502,    0,    0,  506,

      506,  510,  555,  558,  562,    0,  581,  357,  582,  594,
      603,    0,  405,    0,    0,  377,    0,    0,  665,  963,
      886,  964,  957,  974,  975,  980,  981,  992, 1015, 1009,
     1021, 1016, 1033, 1032, 1052, 1059, 2618, 2618, 2618, 2618,
     2618, 2618,  356, 1064, 1070, 1071, 1090, 1076, 1087, 1102,
     1107, 1113, 1114, 1139, 1138, 1150, 1164, 1165, 1166, 1182,
     1184, 1202, 1199,  256,  284,  435,    0,  356, 2618, 2618,
     2618, 2618,  341,    0,    0, 1183, 1222, 1216, 1234, 1219,
     1233, 1245, 1250, 1251, 1262, 1274, 1279, 1291, 1286, 1293,
     1311, 1322, 1328, 1329, 1340, 1334, 1360, 1346, 1363, 1366,

     1377, 1380, 1383, 1397, 1409, 1414, 1415, 1416, 1440, 1426,
     1454, 1452, 1457,    0,  618,  598,  621,  674,  675,  638,
        0,  682,    0,    0,  703,  318,  713,  733,  730,  762,
      776,  816,  769,  815,  775,    0,  782,    0,    0,  835,
      294,  841,  833,  853, 1455, 1483, 1490, 1493, 1517, 1519,
     1522, 1524, 1548, 1550, 1553, 1555, 1573, 1567,  337,  328,
     1587, 1592, 1598, 1616, 1621, 1632, 1633, 1647, 1650, 1652,
     1664, 1666, 1667, 1670, 1695, 1681,  401, 1705, 1706, 1724,
     1710, 1734, 1748, 1744, 1760, 1762, 1767, 1777, 1779, 1794,
     1791, 1806, 1805, 1829, 1830, 1834, 1841, 1857, 1872, 1873,

     1874, 1875, 1877, 1891, 1892, 1910, 1908,    0,  917,    0,
        0,  978, 1020,    0,    0,  254,    0,  900,    0, 1061,
        0,    0,  913, 1092, 1102,    0,    0,    0,    0,    0,
     1030, 1911, 1926, 1925, 1928, 1942, 1944, 1945, 1959, 1962,
     1960, 1987, 1977, 1988, 1994, 2005, 2006, 2020, 2022, 2025,
     2037, 2039, 2040, 2056, 2068, 2057, 2071, 2073, 2074, 2088,
     2105, 2099, 2102, 2116, 2117, 2140, 2133, 2143, 2145, 2150,
     2168, 2169, 2179, 2174, 2184, 2194, 2210, 2211, 2212,    0,
     1111, 1109,  259,    0,    0,    0, 1120, 1121,    0, 2213,
     2228, 2244, 2245, 2230, 2246, 2248, 2263, 2277, 2273, 2279,

     2283, 2302, 2306, 2308, 2322, 2325, 2337, 2339, 2340, 1115,
        0,  253, 1141,    0, 2351, 2341, 2356, 2368, 2375, 2380,
     2385, 2391, 2403, 2392, 1144,  258, 1180, 2419, 2420, 2430,
     2434, 2437, 2453,    0,  261,    0, 2463, 2468, 2470, 2473,
     2497, 2487,    0, 2499, 2502, 2618,  283,  217, 2557, 2562,
     2567, 2572, 2577, 2582, 2587, 2592, 2597, 2602, 2607, 2612
    } ;

static yyconst flex_int16_t yy_def[561] =
    {   0,
      546,    1,  546,    3,  546,    5,    1,    1,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  546,  546,  546,  546,
      549,  549,  549,  549,  549,  549,  546,  549,  546,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  550,  550,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  551,  552,  552,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,  549,  549,
      549,  553,  549,  554,  554,  554,  554,  554,  554,  546,
      554,  555,  546,  556,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  557,  557,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  558,  558,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  554,
      554,  554,  554,  546,  546,  546,  546,  546,  559,  546,
      546,  546,  546,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  549,  549,  549,  549,  549,  549,  549,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,  546,  546,  546,  546,
      546,  546,  560,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  553,  553,  553,  554,  554,  546,  546,
      546,  546,  554,  554,  554,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  559,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,  560,  546,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  553,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  547,
      547,  547,  547,  547,  548,  548,  548,  548,  548,   85,
       85,   85,   85,   85,   98,   98,   98,   98,   98,  137,

      137,  137,  137,  137,  149,  149,  149,  149,  149,  547,
      547,  547,  548,  548,   85,   85,   85,   98,   98,  137,
      137,  137,  149,  149,  547,  547,  548,   85,   85,   98,
      137,  137,  149,  547,  547,  548,   85,   85,   98,  137,
      137,  149,  547,   85,  137,    0,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546
    } ;

static yyconst flex_int16_t yy_nxt[2687] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   17,   32,   33,   33,   34,   33,   35,   36,
       33,   37,   38,   39,   40,   41,   33,   42,   43,   33,
       33,   44,   33,   17,   17,   45,   45,   46,   45,   47,
       48,   45,   45,   49,   50,   51,   52,   53,   45,   54,
       55,   45,   45,   56,   57,   58,   59,   14,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       68,   83,   84,   84,   85,   84,   86,   87,   84,   88,

       89,   90,   91,   92,   84,   93,   94,   84,   84,   95,
       84,   96,   68,   97,   97,   98,   97,   99,  100,   97,
       97,  101,  102,  103,  104,  105,   97,  106,  107,   97,
       97,  108,  109,  110,  111,  112,  114,  115,  116,  117,
      118,  119,  120,  121,  118,  122,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  121,  135,
      136,  136,  137,  136,  138,  139,  136,  140,  141,  142,
      143,  144,  136,  145,  146,  136,  136,  147,  136,  121,
      121,  148,  148,  149,  148,  150,  151,  148,  148,  152,
      153,  154,  155,  156,  148,  157,  158,  148,  148,  159,

      160,  161,  162,  118,   14,   14,  171,  175,  179,  177,
      164,  164,  180,  172,  178,  176,  181,  165,  165,  183,
      182,  192,  187,  185,  188,  184,  190,  191,  175,  186,
      179,  177,  207,  180,  195,  265,  178,  176,  181,  196,
      183,   60,  182,  187,  185,  193,  188,  184,  190,  191,
      197,  186,  202,  194,  207,  199,  195,  198,  203,  200,
      211,  196,  204,  201,  265,  206,  193,  217,  205,  315,
      266,  197,  209,  202,  218,  194,  199,  274,  210,  198,
      203,  200,  211,  204,  275,  201,  206,  174,  316,  543,
      205,  315,  265,  535,  209,  526,  238,  512,  483,  266,

      210,  212,  212,  212,  212,  212,  212,  317,  212,  316,
      212,  212,  212,  212,  212,  212,  212,  212,  219,  212,
      212,  212,  212,  212,  212,  219,  222,  266,  318,  317,
      219,  223,  224,  219,  360,  232,  239,  319,  219,  219,
      240,  320,  321,  360,  428,  241,  219,  416,  222,  318,
      242,  219,  322,  223,  224,  219,  232,  243,  273,  319,
      219,  268,  360,  320,  321,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  322,  212,  327,  212,  212,  212,
      212,  212,  212,  212,  212,  323,  212,  212,  212,  212,
      212,  212,  220,  219,  216,  219,  244,  327,  225,  228,

      221,  219,  226,  219,  244,  229,  227,  323,  330,  265,
      213,  341,  326,  220,  219,  324,  219,  244,  170,  225,
      228,  260,  221,  219,  226,  219,  244,  229,  227,  330,
      219,  219,  212,  212,  212,  230,  325,  324,  219,  219,
      233,  231,  166,  265,  266,  219,  273,  249,  272,  234,
      270,  219,  219,  219,  250,  244,  230,  328,  325,  219,
      219,  219,  233,  231,  219,  235,  219,  219,  249,  329,
      236,  331,  219,  268,  216,  219,  250,  244,  266,  328,
      219,  215,  332,  214,  213,  219,  208,  235,  189,  219,
      377,  329,  236,  331,  219,  212,  212,  212,  212,  212,

      212,  173,  212,  332,  212,  212,  212,  212,  212,  212,
      212,  212,  244,  212,  212,  212,  212,  212,  212,  244,
      247,  170,  276,  244,  251,  248,  291,  244,  252,  261,
      276,  244,  253,  244,  333,  262,  334,  169,  168,  167,
      244,  166,  247,  276,  244,  251,  335,  248,  336,  244,
      252,  261,  276,  244,  253,  546,  333,  262,  334,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  335,  212,
      336,  212,  212,  212,  212,  212,  212,  212,  212,  163,
      212,  212,  212,  212,  212,  212,  245,  244,  244,  337,
      113,  254,  256,  244,  246,  244,  244,  255,  257,  338,

      339,  244,   60,  259,  546,  546,  546,  245,  244,  244,
      342,  337,  254,  256,  244,  340,  246,  244,  244,  255,
      257,  338,  339,  244,  244,  259,  212,  212,  212,  258,
      244,  342,  244,  343,  344,  409,  263,  340,  244,  546,
      546,  546,  546,  546,  546,  244,  408,  546,  546,  410,
      258,  244,  546,  546,  244,  343,  344,  409,  263,  546,
      244,  267,  267,  267,  267,  267,  267,  408,  267,  267,
      410,  546,  413,  267,  267,  267,  267,  267,  276,  267,
      267,  267,  267,  267,  267,  276,  279,  546,  294,  219,
      276,  280,  281,  276,  413,  289,  297,  219,  276,  276,

      411,  298,  546,  412,  267,  546,  276,  546,  279,  294,
      219,  276,  546,  280,  281,  276,  289,  414,  297,  219,
      276,  411,  546,  298,  412,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  415,  267,  267,  546,  414,
      546,  267,  267,  267,  267,  267,  417,  267,  267,  267,
      267,  267,  267,  277,  276,  546,  276,  415,  419,  282,
      285,  278,  276,  283,  276,  418,  286,  284,  417,  546,
      276,  546,  267,  546,  277,  276,  292,  276,  276,  419,
      282,  285,  276,  278,  276,  283,  276,  418,  286,  284,
      276,  276,  290,  267,  267,  267,  267,  276,  292,  420,

      276,  287,  276,  276,  421,  276,  423,  288,  293,  425,
      276,  546,  276,  546,  290,  546,  546,  426,  276,  546,
      546,  420,  287,  276,  546,  421,  546,  276,  423,  288,
      293,  425,  276,  267,  267,  267,  267,  267,  267,  426,
      267,  267,  422,  424,  546,  267,  267,  267,  267,  267,
      299,  267,  267,  267,  267,  267,  267,  300,  294,  546,
      294,  430,  294,  422,  424,  301,  304,  427,  294,  302,
      294,  299,  305,  303,  429,  546,  267,  546,  546,  300,
      294,  294,  430,  294,  546,  431,  301,  304,  546,  427,
      294,  302,  294,  546,  305,  303,  429,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  267,  431,  267,  267,
      346,  546,  546,  267,  267,  267,  267,  267,  219,  267,
      267,  267,  267,  267,  267,  295,  294,  294,  484,  294,
      306,  346,  308,  296,  294,  294,  307,  294,  546,  309,
      219,  486,  546,  546,  267,  546,  295,  294,  294,  484,
      294,  306,  294,  308,  480,  296,  294,  294,  307,  294,
      294,  309,  486,  294,  294,  267,  267,  267,  267,  311,
      313,  294,  294,  294,  546,  312,  480,  310,  546,  546,
      546,  348,  294,  546,  294,  294,  546,  219,  219,  219,
      546,  311,  313,  294,  294,  219,  219,  312,  219,  219,

      345,  347,  348,  546,  219,  219,  219,  219,  219,  219,
      349,  219,  219,  219,  481,  546,  219,  219,  219,  219,
      219,  350,  345,  347,  219,  219,  219,  546,  219,  219,
      351,  546,  349,  219,  219,  219,  481,  219,  546,  219,
      219,  219,  546,  350,  546,  219,  219,  219,  219,  352,
      353,  482,  351,  219,  219,  546,  219,  219,  489,  354,
      219,  219,  546,  219,  356,  219,  219,  355,  546,  219,
      219,  352,  353,  482,  546,  219,  219,  219,  219,  489,
      357,  354,  546,  219,  219,  546,  219,  219,  244,  355,
      358,  219,  546,  546,  244,  362,  244,  219,  485,  546,

      364,  357,  244,  244,  219,  546,  219,  361,  244,  244,
      546,  244,  358,  219,  244,  244,  362,  546,  244,  365,
      485,  364,  244,  546,  244,  244,  244,  363,  487,  361,
      244,  244,  244,  488,  244,  244,  511,  244,  244,  244,
      546,  365,  510,  366,  244,  244,  244,  244,  514,  363,
      487,  513,  244,  525,  367,  488,  244,  511,  244,  244,
      546,  244,  244,  244,  510,  366,  546,  244,  244,  514,
      244,  244,  369,  513,  244,  525,  367,  368,  546,  527,
      546,  534,  244,  244,  244,  546,  546,  546,  244,  244,
      244,  370,  244,  244,  369,  244,  244,  244,  244,  368,

      372,  527,  371,  534,  244,  546,  244,  276,  244,  244,
      244,  244,  374,  370,  244,  276,  244,  536,  244,  244,
      244,  546,  372,  244,  371,  546,  244,  244,  276,  244,
      376,  244,  546,  374,  244,  546,  373,  276,  244,  536,
      379,  375,  546,  381,  244,  546,  276,  244,  276,  546,
      546,  276,  376,  244,  276,  546,  244,  276,  276,  378,
      546,  379,  546,  375,  381,  276,  276,  276,  546,  276,
      276,  380,  546,  276,  276,  276,  276,  276,  276,  276,
      382,  378,  276,  276,  546,  546,  276,  276,  276,  546,
      276,  383,  546,  380,  276,  276,  276,  546,  276,  276,

      384,  546,  382,  276,  276,  276,  276,  276,  385,  546,
      276,  276,  546,  383,  546,  276,  276,  276,  276,  276,
      386,  546,  384,  276,  276,  276,  546,  388,  276,  387,
      385,  276,  546,  276,  546,  276,  276,  546,  276,  546,
      276,  546,  386,  389,  546,  276,  276,  276,  546,  388,
      390,  387,  276,  294,  276,  546,  276,  546,  393,  391,
      276,  294,  546,  546,  294,  276,  294,  276,  546,  546,
      395,  390,  294,  276,  294,  546,  276,  392,  294,  393,
      546,  391,  276,  294,  294,  294,  546,  294,  294,  546,
      294,  395,  294,  546,  294,  396,  546,  394,  294,  392,

      294,  294,  546,  546,  294,  294,  546,  294,  294,  294,
      397,  294,  294,  546,  294,  294,  546,  396,  546,  394,
      294,  294,  294,  398,  546,  294,  546,  546,  294,  294,
      546,  294,  397,  294,  294,  399,  546,  294,  294,  294,
      294,  294,  294,  400,  546,  398,  294,  294,  294,  546,
      294,  294,  546,  402,  294,  401,  546,  399,  294,  294,
      294,  294,  546,  294,  294,  400,  546,  546,  294,  294,
      294,  294,  294,  546,  403,  402,  294,  401,  294,  219,
      404,  294,  405,  432,  294,  294,  294,  219,  407,  294,
      546,  406,  546,  546,  294,  546,  403,  294,  546,  294,

      219,  546,  294,  405,  432,  546,  294,  219,  294,  219,
      407,  294,  546,  406,  219,  219,  546,  219,  434,  435,
      433,  546,  219,  546,  546,  219,  546,  546,  219,  546,
      546,  546,  546,  546,  546,  219,  546,  219,  219,  434,
      435,  219,  433,  219,  219,  436,  219,  219,  219,  219,
      546,  219,  546,  437,  219,  546,  219,  546,  546,  438,
      546,  546,  219,  546,  219,  546,  436,  219,  546,  219,
      546,  219,  219,  219,  219,  437,  219,  219,  219,  219,
      219,  438,  219,  546,  440,  439,  546,  219,  546,  546,
      546,  219,  546,  219,  546,  219,  546,  219,  219,  442,

      219,  546,  219,  546,  219,  219,  441,  439,  546,  219,
      546,  244,  219,  546,  546,  443,  244,  546,  219,  244,
      546,  442,  244,  546,  244,  546,  445,  219,  441,  444,
      244,  546,  244,  546,  546,  546,  443,  244,  546,  546,
      244,  244,  446,  244,  546,  244,  244,  445,  244,  546,
      546,  444,  244,  244,  546,  546,  244,  244,  447,  546,
      448,  244,  546,  446,  244,  244,  244,  449,  546,  546,
      244,  244,  546,  546,  244,  244,  244,  244,  244,  244,
      447,  448,  244,  546,  244,  450,  244,  244,  244,  449,
      244,  244,  244,  546,  244,  244,  244,  244,  451,  244,

      546,  244,  244,  453,  244,  244,  244,  450,  546,  244,
      546,  244,  244,  455,  546,  244,  546,  452,  244,  244,
      451,  244,  546,  454,  244,  453,  244,  244,  546,  276,
      276,  546,  546,  456,  276,  455,  459,  276,  276,  546,
      244,  546,  276,  457,  454,  546,  546,  546,  276,  244,
      276,  276,  458,  546,  456,  276,  276,  459,  276,  276,
      276,  546,  460,  546,  276,  457,  276,  546,  276,  276,
      546,  546,  276,  458,  546,  546,  276,  546,  276,  276,
      276,  546,  461,  460,  276,  546,  276,  546,  276,  276,
      546,  276,  276,  276,  276,  462,  546,  546,  276,  276,

      546,  276,  276,  276,  461,  276,  546,  276,  464,  463,
      546,  276,  276,  546,  276,  276,  276,  462,  276,  546,
      546,  276,  276,  466,  276,  546,  276,  465,  546,  294,
      294,  463,  546,  276,  467,  546,  276,  294,  294,  276,
      546,  546,  468,  546,  546,  466,  546,  546,  276,  465,
      294,  294,  546,  294,  294,  467,  470,  469,  294,  294,
      294,  294,  294,  546,  468,  294,  294,  546,  546,  472,
      546,  471,  546,  294,  294,  294,  546,  470,  469,  294,
      546,  294,  546,  294,  294,  546,  294,  546,  294,  294,
      472,  473,  546,  471,  546,  294,  294,  294,  294,  294,

      546,  294,  294,  546,  294,  294,  294,  294,  474,  475,
      546,  294,  546,  473,  546,  294,  294,  294,  294,  294,
      294,  546,  294,  294,  294,  477,  294,  294,  294,  294,
      474,  475,  294,  546,  294,  219,  294,  294,  478,  546,
      479,  476,  294,  219,  546,  294,  294,  477,  546,  219,
      219,  546,  219,  294,  546,  294,  219,  219,  219,  478,
      219,  546,  479,  490,  294,  219,  219,  546,  219,  219,
      219,  219,  546,  219,  219,  492,  219,  219,  491,  219,
      219,  546,  219,  219,  219,  490,  219,  219,  546,  219,
      219,  219,  219,  546,  219,  546,  219,  492,  219,  219,

      491,  244,  546,  546,  219,  219,  493,  219,  546,  244,
      546,  219,  244,  219,  219,  494,  219,  546,  244,  219,
      244,  546,  244,  546,  546,  495,  244,  546,  546,  244,
      244,  244,  219,  244,  496,  546,  494,  244,  244,  244,
      546,  219,  244,  546,  244,  546,  244,  495,  244,  244,
      244,  244,  244,  498,  244,  496,  497,  244,  546,  244,
      244,  244,  546,  244,  244,  244,  546,  244,  546,  244,
      244,  244,  244,  546,  244,  498,  244,  546,  497,  244,
      244,  276,  244,  546,  244,  244,  546,  546,  244,  276,
      546,  244,  244,  244,  244,  276,  499,  276,  276,  546,

      244,  244,  276,  276,  546,  276,  276,  546,  500,  546,
      244,  276,  276,  244,  546,  546,  276,  499,  276,  276,
      276,  546,  244,  276,  501,  276,  276,  276,  276,  276,
      500,  276,  546,  276,  276,  546,  502,  276,  546,  546,
      276,  276,  276,  546,  276,  546,  501,  276,  276,  276,
      276,  546,  546,  276,  546,  546,  276,  294,  502,  276,
      503,  276,  276,  546,  276,  294,  546,  294,  504,  294,
      276,  276,  276,  546,  294,  294,  546,  294,  294,  546,
      505,  546,  294,  546,  546,  276,  546,  294,  294,  504,
      294,  546,  294,  294,  276,  294,  506,  294,  294,  294,

      294,  294,  505,  294,  294,  507,  294,  546,  294,  546,
      508,  294,  546,  294,  294,  546,  294,  506,  294,  294,
      546,  546,  294,  294,  294,  546,  294,  507,  294,  294,
      546,  546,  508,  294,  294,  294,  294,  219,  294,  294,
      509,  546,  294,  294,  294,  219,  546,  546,  294,  546,
      546,  546,  219,  546,  219,  294,  294,  294,  219,  515,
      219,  509,  219,  546,  294,  294,  294,  219,  219,  219,
      244,  516,  244,  219,  546,  219,  219,  219,  244,  546,
      244,  515,  219,  517,  219,  546,  546,  244,  546,  219,
      219,  244,  516,  244,  518,  244,  546,  244,  219,  219,

      244,  244,  244,  276,  519,  244,  546,  276,  244,  244,
      546,  276,  546,  546,  520,  276,  518,  244,  244,  546,
      546,  546,  244,  546,  276,  519,  276,  244,  276,  521,
      276,  244,  276,  276,  276,  546,  520,  276,  276,  546,
      276,  546,  546,  546,  522,  546,  294,  276,  546,  294,
      521,  276,  546,  276,  294,  546,  276,  294,  546,  546,
      276,  294,  276,  294,  294,  219,  524,  294,  523,  294,
      294,  294,  294,  219,  546,  219,  294,  546,  546,  294,
      219,  546,  294,  219,  294,  294,  219,  524,  219,  528,
      523,  294,  244,  294,  294,  219,  219,  546,  529,  244,

      244,  219,  546,  546,  276,  219,  530,  244,  546,  276,
      219,  528,  276,  244,  546,  276,  294,  276,  531,  546,
      244,  546,  244,  276,  294,  276,  546,  294,  530,  244,
      276,  546,  546,  532,  276,  294,  276,  294,  546,  276,
      531,  533,  546,  219,  219,  276,  294,  546,  294,  546,
      546,  219,  219,  546,  244,  538,  537,  294,  276,  546,
      546,  276,  244,  533,  219,  219,  276,  539,  546,  276,
      546,  540,  541,  219,  219,  244,  546,  294,  537,  276,
      546,  546,  276,  546,  244,  294,  546,  219,  276,  539,
      542,  276,  219,  540,  244,  219,  544,  276,  294,  546,

      219,  546,  244,  546,  546,  276,  546,  294,  219,  546,
      546,  294,  542,  219,  546,  244,  546,  219,  276,  294,
      546,  276,  219,  219,  244,  545,  276,  276,  546,  276,
      546,  219,  294,  546,  276,  546,  546,  546,  546,  546,
      546,  294,  276,  546,  219,  546,  546,  276,  546,  546,
      546,  276,  546,  219,  546,  546,  276,  212,  546,  546,
      212,  212,  219,  546,  546,  219,  219,  237,  237,  237,
      237,  237,  244,  546,  546,  244,  244,  264,  546,  264,
      264,  264,  267,  546,  267,  546,  267,  269,  269,  269,
      269,  269,  271,  271,  271,  271,  271,  276,  546,  276,

      546,  276,  294,  546,  294,  546,  294,  314,  546,  314,
      314,  314,  359,  359,  359,  359,  359,    9,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546
    } ;

static yyconst flex_int16_t yy_chk[2687] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    7,    8,   30,   34,   36,   35,
        7,    8,   37,   30,   35,   34,   37,    7,    8,   38,
       37,  548,   40,   39,   41,   38,   43,   44,   34,   39,
       36,   35,   53,   37,   47,  112,   35,   34,   37,   47,
       38,    8,   37,   40,   39,   46,   41,   38,   43,   44,
       48,   39,   50,   46,   53,   49,   47,   48,   50,   49,
       56,   47,   51,   49,  264,   52,   46,   81,   51,  175,
      112,   48,   55,   50,   81,   46,   49,  133,   55,   48,
       50,   49,   56,   51,  133,   49,   52,  547,  176,  535,
       51,  175,  265,  526,   55,  512,   96,  483,  416,  264,

       55,   84,   84,   84,   84,   84,   84,  177,   84,  176,
       84,   84,   84,   84,   84,   84,   84,   84,   86,   84,
       84,   84,   84,   84,   84,   87,   86,  265,  178,  177,
       91,   86,   87,   87,  360,   91,   96,  181,   91,   86,
       96,  182,  183,  359,  341,   96,   87,  326,   86,  178,
       96,   91,  184,   86,   87,   87,   91,   96,  273,  181,
       91,  268,  243,  182,  183,   84,   84,   84,   85,   85,
       85,   85,   85,   85,  184,   85,  190,   85,   85,   85,
       85,   85,   85,   85,   85,  185,   85,   85,   85,   85,
       85,   85,   85,   88,  216,   89,  106,  190,   88,   89,

       85,   88,   88,   89,  106,   89,   88,  185,  194,  377,
      213,  208,  189,   85,   88,  186,   89,  106,  170,   88,
       89,  106,   85,   88,   88,   89,  106,   89,   88,  194,
       92,   90,   85,   85,   85,   90,  188,  186,   92,   90,
       92,   90,  166,  266,  377,   93,  130,  100,  124,   93,
      122,   92,   90,   93,  100,  100,   90,  191,  188,   94,
       92,   90,   92,   90,   95,   94,   93,   94,  100,  193,
       95,  195,   95,  119,   78,   93,  100,  100,  266,  191,
       94,   72,  196,   70,   66,   95,   54,   94,   42,   94,
      266,  193,   95,  195,   95,   97,   97,   97,   97,   97,

       97,   31,   97,  196,   97,   97,   97,   97,   97,   97,
       97,   97,   99,   97,   97,   97,   97,   97,   97,  101,
       99,   27,  145,  107,  101,   99,  145,  101,  101,  107,
      145,  107,  101,   99,  197,  107,  200,   24,   21,   19,
      101,   15,   99,  145,  107,  101,  201,   99,  202,  101,
      101,  107,  145,  107,  101,    9,  197,  107,  200,   97,
       97,   97,   98,   98,   98,   98,   98,   98,  201,   98,
      202,   98,   98,   98,   98,   98,   98,   98,   98,    6,
       98,   98,   98,   98,   98,   98,   98,  102,  103,  203,
        4,  102,  103,  105,   98,  102,  103,  102,  103,  204,

      205,  105,    2,  105,    0,    0,    0,   98,  102,  103,
      209,  203,  102,  103,  105,  207,   98,  102,  103,  102,
      103,  204,  205,  105,  104,  105,   98,   98,   98,  104,
      108,  209,  104,  210,  211,  316,  108,  207,  108,    0,
        0,    0,    0,    0,    0,  104,  315,    0,    0,  317,
      104,  108,    0,    0,  104,  210,  211,  316,  108,    0,
      108,  136,  136,  136,  136,  136,  136,  315,  136,  136,
      317,    0,  320,  136,  136,  136,  136,  136,  138,  136,
      136,  136,  136,  136,  136,  139,  138,    0,  150,  219,
      143,  138,  139,  139,  320,  143,  150,  219,  143,  138,

      318,  150,    0,  319,  136,    0,  139,    0,  138,  150,
      219,  143,    0,  138,  139,  139,  143,  322,  150,  219,
      143,  318,    0,  150,  319,  136,  136,  136,  136,  137,
      137,  137,  137,  137,  137,  325,  137,  137,    0,  322,
        0,  137,  137,  137,  137,  137,  327,  137,  137,  137,
      137,  137,  137,  137,  140,    0,  141,  325,  329,  140,
      141,  137,  140,  140,  141,  328,  141,  140,  327,    0,
      146,    0,  137,    0,  137,  140,  146,  141,  146,  329,
      140,  141,  144,  137,  140,  140,  141,  328,  141,  140,
      144,  146,  144,  137,  137,  137,  137,  142,  146,  330,

      146,  142,  147,  144,  331,  142,  333,  142,  147,  335,
      147,    0,  144,    0,  144,    0,    0,  337,  142,    0,
        0,  330,  142,  147,    0,  331,    0,  142,  333,  142,
      147,  335,  147,  148,  148,  148,  148,  148,  148,  337,
      148,  148,  332,  334,    0,  148,  148,  148,  148,  148,
      151,  148,  148,  148,  148,  148,  148,  151,  151,    0,
      152,  343,  153,  332,  334,  152,  153,  340,  152,  152,
      153,  151,  153,  152,  342,    0,  148,    0,    0,  151,
      151,  152,  343,  153,    0,  344,  152,  153,    0,  340,
      152,  152,  153,    0,  153,  152,  342,  148,  148,  148,

      148,  149,  149,  149,  149,  149,  149,  344,  149,  149,
      221,    0,    0,  149,  149,  149,  149,  149,  221,  149,
      149,  149,  149,  149,  149,  149,  154,  155,  418,  156,
      154,  221,  155,  149,  154,  155,  154,  156,    0,  156,
      221,  423,    0,    0,  149,    0,  149,  154,  155,  418,
      156,  154,  157,  155,  409,  149,  154,  155,  154,  156,
      157,  156,  423,  158,  159,  149,  149,  149,  149,  158,
      159,  158,  159,  157,    0,  158,  409,  157,    0,    0,
        0,  223,  157,    0,  158,  159,    0,  220,  222,  223,
        0,  158,  159,  158,  159,  220,  222,  158,  224,  225,

      220,  222,  223,    0,  226,  227,  224,  225,  220,  222,
      226,  223,  226,  227,  412,    0,  228,  220,  222,  224,
      225,  227,  220,  222,  228,  226,  227,    0,  224,  225,
      228,    0,  226,  230,  226,  227,  412,  228,    0,  229,
      232,  230,    0,  227,    0,  231,  228,  229,  232,  229,
      230,  413,  228,  231,  230,    0,  234,  233,  431,  231,
      229,  232,    0,  230,  234,  233,  231,  233,    0,  229,
      232,  229,  230,  413,    0,  231,  235,  234,  233,  431,
      235,  231,    0,  236,  235,    0,  234,  233,  244,  233,
      236,  236,    0,    0,  245,  246,  244,  235,  420,    0,

      248,  235,  245,  246,  236,    0,  235,  245,  248,  244,
        0,  249,  236,  236,  247,  245,  246,    0,  244,  249,
      420,  248,  247,    0,  245,  246,  250,  247,  424,  245,
      248,  251,  249,  425,  250,  247,  482,  252,  253,  251,
        0,  249,  481,  252,  247,  252,  253,  250,  488,  247,
      424,  487,  251,  510,  253,  425,  250,  482,  252,  253,
        0,  251,  255,  254,  481,  252,    0,  252,  253,  488,
      255,  254,  255,  487,  256,  510,  253,  254,    0,  513,
        0,  525,  256,  255,  254,    0,    0,    0,  257,  258,
      259,  256,  255,  254,  255,  256,  257,  258,  259,  254,

      259,  513,  257,  525,  256,    0,  260,  276,  261,  257,
      258,  259,  261,  256,  260,  276,  261,  527,  257,  258,
      259,    0,  259,  263,  257,    0,  262,  260,  276,  261,
      263,  263,    0,  261,  262,    0,  260,  276,  261,  527,
      278,  262,    0,  280,  263,    0,  277,  262,  278,    0,
        0,  280,  263,  263,  277,    0,  262,  281,  279,  277,
        0,  278,    0,  262,  280,  281,  279,  277,    0,  282,
      278,  279,    0,  280,  283,  284,  277,  282,  281,  279,
      283,  277,  283,  284,    0,    0,  285,  281,  279,    0,
      282,  284,    0,  279,  285,  283,  284,    0,  286,  282,

      285,    0,  283,  287,  283,  284,  286,  285,  286,    0,
      289,  287,    0,  284,    0,  288,  285,  290,  289,  286,
      287,    0,  285,  288,  287,  290,    0,  290,  286,  288,
      286,  289,    0,  287,    0,  291,  288,    0,  290,    0,
      289,    0,  287,  291,    0,  288,  292,  290,    0,  290,
      292,  288,  293,  294,  292,    0,  291,    0,  296,  293,
      293,  294,    0,    0,  295,  291,  296,  292,    0,    0,
      298,  292,  295,  293,  294,    0,  292,  295,  298,  296,
        0,  293,  293,  294,  297,  295,    0,  299,  296,    0,
      300,  298,  297,    0,  295,  299,    0,  297,  300,  295,

      298,  301,    0,    0,  302,  297,    0,  303,  299,  301,
      302,  300,  302,    0,  297,  303,    0,  299,    0,  297,
      300,  304,  301,  303,    0,  302,    0,    0,  303,  304,
        0,  301,  302,  305,  302,  304,    0,  303,  306,  307,
      308,  305,  304,  305,    0,  303,  306,  307,  308,    0,
      310,  304,    0,  307,  305,  306,    0,  304,  310,  306,
      307,  308,    0,  305,  309,  305,    0,    0,  306,  307,
      308,  310,  309,    0,  309,  307,  312,  306,  311,  345,
      310,  313,  311,  345,  312,  309,  311,  345,  313,  313,
        0,  312,    0,    0,  309,    0,  309,  312,    0,  311,

      345,    0,  313,  311,  345,    0,  312,  346,  311,  345,
      313,  313,    0,  312,  347,  346,    0,  348,  347,  348,
      346,    0,  347,    0,    0,  348,    0,    0,  346,    0,
        0,    0,    0,    0,    0,  347,    0,  346,  348,  347,
      348,  349,  346,  350,  347,  349,  351,  348,  352,  349,
        0,  350,    0,  350,  351,    0,  352,    0,    0,  352,
        0,    0,  349,    0,  350,    0,  349,  351,    0,  352,
        0,  349,  353,  350,  354,  350,  351,  355,  352,  356,
      353,  352,  354,    0,  356,  355,    0,  356,    0,    0,
        0,  358,    0,  353,    0,  354,    0,  357,  355,  358,

      356,    0,  353,    0,  354,  357,  357,  355,    0,  356,
        0,  361,  358,    0,    0,  361,  362,    0,  357,  361,
        0,  358,  363,    0,  362,    0,  363,  357,  357,  362,
      363,    0,  361,    0,    0,    0,  361,  362,    0,    0,
      364,  361,  364,  363,    0,  365,  362,  363,  364,    0,
        0,  362,  363,  365,    0,    0,  366,  367,  365,    0,
      366,  364,    0,  364,  366,  367,  365,  367,    0,    0,
      364,  368,    0,    0,  369,  365,  370,  366,  367,  368,
      365,  366,  369,    0,  370,  369,  366,  367,  371,  367,
      372,  373,  368,    0,  374,  369,  371,  370,  372,  373,

        0,  368,  374,  374,  369,  376,  370,  369,    0,  371,
        0,  372,  373,  376,    0,  374,    0,  373,  371,  375,
      372,  373,    0,  375,  374,  374,  376,  375,    0,  378,
      379,    0,    0,  378,  381,  376,  381,  378,  379,    0,
      375,    0,  381,  379,  375,    0,    0,    0,  380,  375,
      378,  379,  380,    0,  378,  381,  380,  381,  382,  378,
      379,    0,  382,    0,  381,  379,  382,    0,  384,  380,
        0,    0,  383,  380,    0,    0,  384,    0,  380,  382,
      383,    0,  383,  382,  385,    0,  386,    0,  382,  384,
        0,  387,  385,  383,  386,  385,    0,    0,  384,  387,

        0,  388,  383,  389,  383,  385,    0,  386,  389,  388,
        0,  389,  387,    0,  385,  391,  386,  385,  390,    0,
        0,  387,  388,  391,  389,    0,  390,  390,    0,  393,
      392,  388,    0,  389,  392,    0,  391,  393,  392,  390,
        0,    0,  393,    0,    0,  391,    0,    0,  390,  390,
      393,  392,    0,  394,  395,  392,  395,  394,  396,  393,
      392,  394,  395,    0,  393,  397,  396,    0,    0,  397,
        0,  396,    0,  397,  394,  395,    0,  395,  394,  396,
        0,  398,    0,  394,  395,    0,  397,    0,  396,  398,
      397,  398,    0,  396,    0,  397,  399,  400,  401,  402,

        0,  403,  398,    0,  399,  400,  401,  402,  400,  403,
        0,  398,    0,  398,    0,  404,  405,  399,  400,  401,
      402,    0,  403,  404,  405,  405,  399,  400,  401,  402,
      400,  403,  407,    0,  406,  432,  404,  405,  406,    0,
      407,  404,  406,  432,    0,  404,  405,  405,    0,  434,
      433,    0,  435,  407,    0,  406,  432,  434,  433,  406,
      435,    0,  407,  433,  406,  432,  436,    0,  437,  438,
      434,  433,    0,  435,  436,  437,  437,  438,  436,  434,
      433,    0,  435,  439,  441,  433,  440,  436,    0,  437,
      438,  439,  441,    0,  440,    0,  436,  437,  437,  438,

      436,  443,    0,    0,  439,  441,  440,  440,    0,  443,
        0,  442,  444,  439,  441,  442,  440,    0,  445,  442,
      444,    0,  443,    0,    0,  444,  445,    0,    0,  446,
      447,  443,  442,  444,  447,    0,  442,  446,  447,  445,
        0,  442,  444,    0,  448,    0,  449,  444,  445,  450,
      446,  447,  448,  449,  449,  447,  448,  450,    0,  446,
      447,  451,    0,  452,  453,  448,    0,  449,    0,  451,
      450,  452,  453,    0,  448,  449,  449,    0,  448,  450,
      454,  456,  451,    0,  452,  453,    0,    0,  454,  456,
        0,  451,  455,  452,  453,  457,  455,  458,  459,    0,

      455,  454,  456,  457,    0,  458,  459,    0,  457,    0,
      454,  456,  460,  455,    0,    0,  457,  455,  458,  459,
      460,    0,  455,  462,  460,  457,  463,  458,  459,  461,
      457,  462,    0,  460,  463,    0,  461,  461,    0,    0,
      464,  465,  460,    0,  462,    0,  460,  463,  464,  465,
      461,    0,    0,  462,    0,    0,  463,  467,  461,  461,
      464,  464,  465,    0,  466,  467,    0,  468,  466,  469,
      464,  465,  466,    0,  470,  468,    0,  469,  467,    0,
      468,    0,  470,    0,    0,  466,    0,  467,  468,  466,
      469,    0,  471,  472,  466,  470,  471,  468,  474,  469,

      471,  472,  468,  473,  470,  472,  474,    0,  475,    0,
      473,  473,    0,  471,  472,    0,  475,  471,  476,  474,
        0,    0,  471,  472,  473,    0,  476,  472,  474,  475,
        0,    0,  473,  473,  477,  478,  479,  490,  475,  476,
      479,    0,  477,  478,  479,  490,    0,    0,  476,    0,
        0,    0,  491,    0,  494,  477,  478,  479,  490,  491,
      491,  479,  494,    0,  477,  478,  479,  490,  492,  493,
      495,  492,  496,  491,    0,  494,  492,  493,  495,    0,
      496,  491,  491,  493,  494,    0,    0,  497,    0,  492,
      493,  495,  492,  496,  497,  497,    0,  499,  492,  493,

      495,  498,  496,  500,  498,  499,    0,  501,  497,  498,
        0,  500,    0,    0,  501,  501,  497,  497,  499,    0,
        0,    0,  498,    0,  500,  498,  502,  499,  501,  502,
      503,  498,  504,  500,  502,    0,  501,  501,  503,    0,
      504,    0,    0,    0,  503,    0,  505,  502,    0,  506,
      502,  503,    0,  504,  505,    0,  502,  506,    0,    0,
      503,  507,  504,  508,  509,  516,  508,  505,  507,  507,
      506,  508,  509,  516,    0,  515,  505,    0,    0,  506,
      517,    0,  507,  515,  508,  509,  516,  508,  517,  515,
      507,  507,  518,  508,  509,  516,  515,    0,  517,  519,

      518,  517,    0,    0,  520,  515,  518,  519,    0,  521,
      517,  515,  520,  518,    0,  522,  524,  521,  520,    0,
      519,    0,  518,  522,  524,  520,    0,  523,  518,  519,
      521,    0,    0,  522,  520,  523,  522,  524,    0,  521,
      520,  523,    0,  528,  529,  522,  524,    0,  523,    0,
        0,  528,  529,    0,  530,  529,  528,  523,  531,    0,
        0,  532,  530,  523,  528,  529,  531,  530,    0,  532,
        0,  531,  532,  528,  529,  530,    0,  533,  528,  531,
        0,    0,  532,    0,  530,  533,    0,  537,  531,  530,
      533,  532,  538,  531,  539,  537,  538,  540,  533,    0,

      538,    0,  539,    0,    0,  540,    0,  533,  537,    0,
        0,  542,  533,  538,    0,  539,    0,  537,  540,  542,
        0,  541,  538,  544,  539,  541,  545,  540,    0,  541,
        0,  544,  542,    0,  545,    0,    0,    0,    0,    0,
        0,  542,  541,    0,  544,    0,    0,  545,    0,    0,
        0,  541,    0,  544,    0,    0,  545,  549,    0,    0,
      549,  549,  550,    0,    0,  550,  550,  551,  551,  551,
      551,  551,  552,    0,    0,  552,  552,  553,    0,  553,
      553,  553,  554,    0,  554,    0,  554,  555,  555,  555,
      555,  555,  556,  556,  556,  556,  556,  557,    0,  557,

        0,  557,  558,    0,  558,    0,  558,  559,    0,  559,
      559,  559,  560,  560,  560,  560,  560,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[74] =
    {   0,
      119,  134,  135,  136,  137,  141,  148,  150,  153,  160,
      166,  180,  189,  194,  202,  209,  212,  218,  221,  224,
      226,  228,  238,  241,  250,  251,  257,  258,  259,  260,
      261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
      271,  272,  273,  275,  279,  287,  292,  298,  303,  308,
      317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  329,  330,  331,  332,  334,  339,  343,  347,
      351,  359,  364
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 11 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

// nested comment level counter
int nested = 0;
/*
 *  Add Your own definitions here
 */
/*
 * Start state definition
 *
 * str: used in string process
 * Comment: used in comment process
 */

#line 1379 "cool-lex.cc"

#define INITIAL 0
#define str 1
#define Comment 2
#define strnull 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 109 "cool.flex"


 /*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */

 /* end of string */
#line 1643 "cool-lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 547 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2618 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 74 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 74 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 75 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 119 "cool.flex"
{
    int maxchars = string_buf_ptr - string_buf;
    if (maxchars < MAX_STR_CONST) {
        BEGIN(INITIAL);
	string_buf_ptr = '\0';
	cool_yylval.symbol = stringtable.add_string(string_buf, maxchars);
	return STR_CONST;
    } else {
        cool_yylval.error_msg = "String constant too long";
	BEGIN(INITIAL);
	return ERROR;
    }
}	
	YY_BREAK
/* escaped white space */
case 2:
YY_RULE_SETUP
#line 134 "cool.flex"
*string_buf_ptr++ = '\n'; 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 135 "cool.flex"
*string_buf_ptr++ = '\t';
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 136 "cool.flex"
*string_buf_ptr++ = '\b';
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 137 "cool.flex"
*string_buf_ptr++ = '\f';
	YY_BREAK
/* escaped null character '\0', recovery should start from */
/* next line, so need to eat up '\n' */
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 141 "cool.flex"
{
    cool_yylval.error_msg = "String contains escaped null character.";
    BEGIN(INITIAL);
    return ERROR;
}
	YY_BREAK
/* escaped other character */
case 7:
YY_RULE_SETUP
#line 148 "cool.flex"
*string_buf_ptr++ = yytext[1];
	YY_BREAK
/* escaped new line, using span multi-line string */
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 150 "cool.flex"
*string_buf_ptr++ = yytext[1]; ++curr_lineno;
	YY_BREAK
/* normal string character */
case 9:
YY_RULE_SETUP
#line 153 "cool.flex"
{
    char *yptr = yytext;
    while (*yptr) {
        *string_buf_ptr++ = *yptr++;
    }
}
	YY_BREAK
/* null chararcter, should recovery from new line */
case 10:
YY_RULE_SETUP
#line 160 "cool.flex"
{
    cool_yylval.error_msg = "String contains null character.";
    BEGIN(INITIAL);
    return ERROR;
}
	YY_BREAK
/* non-escaped new line, it is error */
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 166 "cool.flex"
{
    cool_yylval.error_msg = "Unterminated string constant";
    curr_lineno += 1;
    BEGIN(INITIAL);
    return ERROR;
   
}
	YY_BREAK
/* end of file */
case YY_STATE_EOF(str):
#line 174 "cool.flex"
{
    cool_yylval.error_msg = "EOF in string constant";
    BEGIN(INITIAL);
    return ERROR;
}
	YY_BREAK
/* start of string */
case 12:
YY_RULE_SETUP
#line 180 "cool.flex"
{
    // initiate string point
    string_buf_ptr = string_buf;
    BEGIN(str);
}
	YY_BREAK
/*
  * one line comment
  */
case 13:
YY_RULE_SETUP
#line 189 "cool.flex"

	YY_BREAK
/*
  * Integers
  */
case 14:
YY_RULE_SETUP
#line 194 "cool.flex"
{
    cool_yylval.symbol = inttable.add_string(yytext);
    return INT_CONST;
}
	YY_BREAK
/*
  * Special Notation
  */
case 15:
YY_RULE_SETUP
#line 202 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
/*
  *  Nested comments
  */
/* nested commment start notation */
case 16:
YY_RULE_SETUP
#line 209 "cool.flex"
++nested;
	YY_BREAK
/* end of comment */
case 17:
YY_RULE_SETUP
#line 212 "cool.flex"
{
	if (--nested < 0) {
	   BEGIN(INITIAL);
	}
}
	YY_BREAK
/* new line in comment */
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 218 "cool.flex"
++curr_lineno;
	YY_BREAK
/* normal character in comment */
case 19:
YY_RULE_SETUP
#line 221 "cool.flex"
/* eat up anything in the comment, if you want, you can store the comment information.*/
	YY_BREAK
/* eat up '*' not followered by ')', leaving it to  '*)' to process */
case 20:
/* rule 20 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 224 "cool.flex"

	YY_BREAK
/* eat up '(' not followerd by '*', leaving it to '(*' to process */
case 21:
/* rule 21 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 226 "cool.flex"

	YY_BREAK
/* eat up a single ')' */
case 22:
YY_RULE_SETUP
#line 228 "cool.flex"

	YY_BREAK
/* end of file in comment */
case YY_STATE_EOF(Comment):
#line 231 "cool.flex"
{
    cool_yylval.error_msg = "EOF in comment";
    BEGIN(INITIAL);
    return ERROR;
}
	YY_BREAK
/* begin of comment */
case 23:
YY_RULE_SETUP
#line 238 "cool.flex"
BEGIN(Comment); nested = 0;
	YY_BREAK
/* "*)" should be always in Comment state, if not, unmatched */
case 24:
YY_RULE_SETUP
#line 241 "cool.flex"
{
    cool_yylval.error_msg = "Unmatched *)";
    BEGIN(INITIAL);
    return ERROR;
}
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 25:
YY_RULE_SETUP
#line 250 "cool.flex"
{ return (DARROW); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 251 "cool.flex"
return LE;
	YY_BREAK
/*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */
case 27:
YY_RULE_SETUP
#line 257 "cool.flex"
return CLASS;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 258 "cool.flex"
return ELSE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 259 "cool.flex"
return FI;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 260 "cool.flex"
return IF;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 261 "cool.flex"
return IN;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 262 "cool.flex"
return INHERITS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 263 "cool.flex"
return LET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 264 "cool.flex"
return LOOP;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 265 "cool.flex"
return POOL;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 266 "cool.flex"
return THEN;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 267 "cool.flex"
return WHILE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 268 "cool.flex"
return CASE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 269 "cool.flex"
return ESAC;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 270 "cool.flex"
return OF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 271 "cool.flex"
return NEW;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 272 "cool.flex"
return ISVOID;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 273 "cool.flex"
return NOT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 275 "cool.flex"
{
    cool_yylval.boolean = 1;
    return BOOL_CONST;    
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 279 "cool.flex"
{
    cool_yylval.boolean = 0;
    return BOOL_CONST;
}
	YY_BREAK
/*
  * Identifers
  */
case 46:
YY_RULE_SETUP
#line 287 "cool.flex"
{ 
    cool_yylval.symbol = idtable.add_string(yytext);
    return OBJECTID;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 292 "cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return TYPEID;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 298 "cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return TYPEID;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 303 "cool.flex"
{
	cool_yylval.error_msg = "_";
	return ERROR;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 308 "cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return OBJECTID;
}
	YY_BREAK
/*
  * single character notation
  */
case 51:
YY_RULE_SETUP
#line 317 "cool.flex"
return ';';
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 318 "cool.flex"
return '{';
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 319 "cool.flex"
return '}';
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 320 "cool.flex"
return ':';
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 321 "cool.flex"
return '.';
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 322 "cool.flex"
return '(';
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 323 "cool.flex"
return ')';
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 324 "cool.flex"
return '=';
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 325 "cool.flex"
return '+';
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 326 "cool.flex"
return '-';
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 327 "cool.flex"
return '*';
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 328 "cool.flex"
return '/';
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 329 "cool.flex"
return '<';
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 330 "cool.flex"
return ',';
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 331 "cool.flex"
return '~';
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 332 "cool.flex"
return '@';
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 334 "cool.flex"
{
    cool_yylval.error_msg = yytext;
    return ERROR;		
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 339 "cool.flex"
{
    cool_yylval.error_msg = "\001";
    return ERROR;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 343 "cool.flex"
{
    cool_yylval.error_msg = "\002";
    return ERROR;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 347 "cool.flex"
{
    cool_yylval.error_msg = "\003";
    return ERROR;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 351 "cool.flex"
{
    cool_yylval.error_msg = "\004";
    return ERROR;
}
	YY_BREAK
/*
  * Line number
  */
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 359 "cool.flex"
{ ++curr_lineno; }
	YY_BREAK
/*
  * White Space, do nothing
  */
case 73:
YY_RULE_SETUP
#line 364 "cool.flex"
/* do nothing */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 365 "cool.flex"
ECHO;
	YY_BREAK
#line 2290 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(strnull):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 68);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 547 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 68;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 547 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 546);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 365 "cool.flex"



